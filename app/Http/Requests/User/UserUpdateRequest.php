<?php

namespace App\Http\Requests\User;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Contracts\Validation\Validator;
use Illuminate\Http\Exceptions\HttpResponseException;

class UserUpdateRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    protected function getValidatorInstance()
    {
        $this->merge(["id"  =>  $this->user]);
        return parent::getValidatorInstance(); // TODO: Change the autogenerated stub
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
            "id"         => ['required', 'exists:users,id'],
            "name"       => ['required'],
            "birth_date" => ['required'],
            "phone"      => ['nullable'],
            "city"       => ['required'],
            "state"      => ['required'],
            "street"     => ['required'],
            "zip_code"   => ['required'],
            "email"      => ['required', 'unique:users,email,'. $this->id.",id"],
            "is_admin"   => ['required', 'boolean'],
            "password"   => ['sometimes'],
        ];
    }
    protected function failedValidation(Validator $validator)
    {
        throw new HttpResponseException(
            response()->json(["messages" => $validator->errors(), "status" => 500], 500)
        );
    }
}
